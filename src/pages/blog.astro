---
import Post from "../components/blog/post.astro";
import Tag from "../components/blog/tag.astro";
import SectionLayout from "../layouts/SectionLayout.astro";
import type { PostFrontmatter } from "../types";

interface Post {
  frontmatter: PostFrontmatter;
  url: string;
}

const posts: Post[] = Object.values(
  import.meta.glob("./blog/posts/**/*.md", { eager: true })
)
  .map((x) => x as Post)
  .sort(
    (p, q) =>
      new Date(
        q.frontmatter.dates.edited ?? q.frontmatter.dates.publish
      ).getTime() -
      new Date(
        p.frontmatter.dates.edited ?? p.frontmatter.dates.publish
      ).getTime()
  );

const tagOccur: { [k: string]: number } = {};
for (const post of posts) {
  for (const tag of post.frontmatter.tags ?? []) {
    if (!(tag in tagOccur)) {
      tagOccur[tag] = 0;
    }
    tagOccur[tag] += 1;
  }
}

const tags = Object.entries(tagOccur)
  .map((to) => {
    return { name: to[0], occur: to[1] };
  })
  .sort((a, b) => b.occur - a.occur);
---

<SectionLayout pageTitle="Blog" activePage="blog">
  <h1 class="mb-3">Blog</h1>
  <div class="mb-3">
    {tags.map((tag) => <Tag tagName={tag.name} postCount={tag.occur} />)}
  </div>
  <h2 class="mb-2">All posts</h2>
  <div>
    {
      posts.map((post) => (
        <Post
          title={post.frontmatter.title}
          description={post.frontmatter.description}
          dates={post.frontmatter.dates}
          tags={post.frontmatter.tags}
          url={post.url}
        />
      ))
    }
  </div>
</SectionLayout>
